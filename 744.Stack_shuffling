#include<iostream>
#include<stack>
#include<vector>
#include<utility>
#include<map>
using std::cin;
using std::cout;
using std::stack;
using std::vector;
using std::pair;
using std::map;
void move(stack<int> s1, stack<int> s2) {
	if (!s1.empty()) {
		s2.push(s1.top());
		s1.pop();
	}
}
bool Aye(vector<int> &A, map<int, int> &B) {
	for (vector<int>::iterator iter1 = A.begin(); iter1 != A.end(); ++iter1) {
		for (vector<int>::iterator iter2 = A.end() - 1; iter2 != iter1; --iter2) {
			if (B[*iter1] > B[*iter2]) {
				/*
					for (vector<int>::iterator inner_iter1 = iter1; inner_iter1 != iter2; ++inner_iter1) {
						for (vector<int>::iterator inner_iter2 = iter2; inner_iter2 != inner_iter1; --inner_iter2) {
							if (B[*inner_iter1] > B[*inner_iter2])
				*/
				for (vector<int>::iterator between = iter1+1;between!=iter2;++between){
							if(!(B[*iter1]>B[*between]&&B[*between]>B[*iter2]))
 							return false;
				}
			}
		}
	}
	return true;
}
int main() {
	int T;
	cin >> T;
	for (int i = 0; i != T; ++i) {
		/*
			stack<int> A;
			stack<int> B;
			stack<int> S;
		*/
		int n;// number of elements in A
		cin >> n;
		vector<int> A;
		int element = 0;
		for (int j = 0; j != n; ++j) {
			cin >> element;
			A.push_back(element);
		}
		int m;//number of permutations
		cin >> m;
		for (int j = 0; j != m; ++j) {
			map<int, int>B;
			for (int k = 0; k != n; ++k) {
				cin >> element;
				B.insert(pair<int, int>(element, k));
			}
			if ((Aye(A, B)))
				cout << "Aye\n";
			else
				cout << "Impossible\n";
		}

	}
	return 0;
}
